Question on Matrix exponentiation:
https://leetcode.com/problems/total-characters-in-string-after-transformations-ii/
#include <bits/stdc++.h>
using namespace std;
const int mod = 1000000007;

vector<vector<int>> matMul(const vector<vector<int>>&a, const vector<vector<int>>& b) {
    int rows = a.size();
    int cols = b[0].size();
    int innerDim = b.size();
    vector<vector<int>> res(rows, vector<int>(cols, 0));

    for (int i = 0; i < rows; i++) {
        for (int j = 0; j < cols; j++) {
            for (int k = 0; k < innerDim; k++) {
                res[i][j] = (res[i][j] + 1LL * a[i][k] * b[k][j] % mod) % mod;
            }
        }
    }
    return res;
}

vector<vector<int>> matrixExp(vector<vector<int>> mat, int n) {
    int size = mat.size();
    vector<vector<int>> res(size, vector<int>(size, 0));

    for (int i = 0; i < size; i++) {
        res[i][i] = 1;  // Initialize res as identity matrix
    }

    while (n > 0) {
        if (n & 1) {
            res = matMul(res, mat);
        }
        mat = matMul(mat, mat);
        n >>= 1;
    }
    return res;
}



//nth term of Fibbonacci sequence in log(n)) using Matrix Exponentiation Alishaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa youutube
const int mod=1000000007;
vector<vector<int>>matMul(vector<vector<int>>a,vector<vector<int>>b){
    vector<vector<int>> res(2, vector<int>(2, 0)); 
    for(int i=0;i<2;i++){
        for(int j=0;j<2;j++){
            for(int k=0;k<2;k++){
                res[i][j]+=( a[i][k]%mod *1ll* b[k][j]%mod) %mod;
                res[i][j]%=mod;
            }
        }
    }
    return res;
}
vector<vector<int>>matrixExp(vector<vector<int>>&a,int n){
    if(n==1) return a;
    vector<vector<int>>temp=matrixExp(a,n/2);
    if(n%2==0) return matMul(temp,temp);
    return matMul(temp, matMul(temp,a) );
}
int Solution::solve(int n) {    
    vector<vector<int>>a={{1,1},{1,0}};   
    vector<vector<int>>res=matrixExp(a,n);
    return res[0][1]%mod;//01 || 10 both cell same ans
}
