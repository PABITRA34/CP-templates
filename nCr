ll powerM(ll x, ll y)
{
    if (y < 0ll)
        return 0;
    ll result = 1ll;
    x = x % MOD;
    if (x == 0ll)
        return 0;
    while (y > 0ll)
    {
        if (y & 1ll)
            result = (result * x) % MOD;
        y = y >> 1ll;
        x = (x * x) % MOD;
    }
    return result;
}
 
ll modAdd(ll x, ll y)
{
    x %= MOD;
    y %= MOD;
    return (x + y) % MOD;
}
 
ll modMul(ll x, ll y, ll MOD)
{
    return ((x % MOD) * 1ll * (y % MOD)) % MOD;
}
 
ll biExp(ll x, ll y)
{
    if (y == 0)
        return 1ll;
    ll ans = 1ll;
    x %= MOD;
    while (y)
    {
        if (y & 1)
            ans = modMul(ans, x, MOD);
        x = modMul(x, x, MOD);
        y >>= 1ll;
    }
    return ans;
}
 
ll mmi(ll x)
{
    return biExp(x, MOD - 2);
}
 
ll modDiv(ll x, ll y)
{
    return modMul(x, mmi(y), MOD);
}
 
ll fac[LENGTH];
void factorial_tab()
{
    fac[0] = 1;
    fac[1] = 1;
    for (int i = 2; i < LENGTH; i++)
        fac[i] = (fac[i - 1] % MOD * i % MOD) % MOD;
    return;
}
 
ll nCr(ll n, ll k)
{
    if (n < k)
        return 0;
    if (k < 0)
        return 0;
    if (n == 0)
        return 1;
    return modDiv(fac[n], modMul(fac[k], fac[n - k], MOD));
}
 
ll nPr(ll n, ll r)
{
    return modDiv(fac[n], fac[n - r]);
}
