class Solution {
    /*
    Euler Path: all edges visited and that too only once
    Euler Ckt: EP + s==e
    
    1) All non zero degree vertices must belong to the same connected component[EP] use vis arr and do dfs from any of them and if 
     are able to vis all of then it means they belong the the same connectec component
    +
    
    2) degree of all non zero degree vertices must be even ----> Euler circuit
    
    
    Semi-Eular Graph---> Euler path but not circuit
    Eular Graph---> EP + EC
    Note: --> In semi-Euler graph only the start and end vertices have odd degrees
    
    */
public:
	int isEulerCircuit(int n, vector<int>adj[]){
	    vector<int>vis(n,0);

	    vector<int>positiveNodes;
	    int odds=0;
	    for(int i=0;i<n;i++) {
	        if(adj[i].size()) positiveNodes.push_back(i);
	        if(adj[i].size() %2) odds++;
	    }
	   
	    // IsConnected check for all the odd degree nodes
	    auto dfs=[&](int u, auto && dfs)->void{
	        vis[u]=1;
	        for(auto &v: adj[u]){
	            if(!vis[v]) dfs(v, dfs);
	        }
	    };
	    if(!positiveNodes.empty()){
	        dfs(positiveNodes[0], dfs);
	        // now check are all of them visted in single dfs call or not
	        for(auto &i: positiveNodes){
	            if(!vis[i]) return 0;// neither EP nor EC i.e. notConnected
	        }
	    }
	    
	    if(odds>2) return 0;//none
	    if(odds==2) return 1;// EP but not EC
	    
	    return 2;// Euler ckt 
	}
};
