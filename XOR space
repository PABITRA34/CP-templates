class Solution {
public:
    static const int N = 1e5 + 10, LOG_A = 20;

    int basis[LOG_A];
    Solution() {
        for (int i = 0; i < LOG_A; i++) {
            basis[i] = 0;
        }
    }

    // Insert a number into the basis
    void insertVector(int mask) {
        for (int i = LOG_A - 1; i >= 0; i--) {
            if ((mask & (1 << i)) == 0) continue;

            if (!basis[i]) {
                basis[i] = mask;
                return;
            }

            mask ^= basis[i];
        }
    }


    int maxSubsetXOR(int arr[], int n) {
        // Build the basis from the array
        for (int i = 0; i < n; i++) {
            insertVector(arr[i]);
        }
        // Find the maximum XOR subset
        int ans = 0;
        for (int i = LOG_A - 1; i >= 0; i--) {
            if (!basis[i]) continue;
            ans = std::max(ans, ans ^ basis[i]);
        }
        return ans;
    }
};
https://www.youtube.com/watch?v=qIXg9vJ6hZM
https://codeforces.com/blog/entry/68953?mobile=true
