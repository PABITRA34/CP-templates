#include <iostream>
#include <vector>
#include <deque>
#include <limits>
// 01 BFS is more efficient than Dijkstra's algo
// tc O(v+e)
using namespace std;

const int INF = numeric_limits<int>::max();

vector<int> zeroOneBFS(int n, vector<vector<pair<int, int>>>& adj, int start) {
    vector<int> dist(n, INF);
    deque<int> dq;
    dist[start] = 0;
    dq.push_front(start);

    while (!dq.empty()) {
        int u = dq.front();
        dq.pop_front();

        for (auto& edge : adj[u]) {
            int v = edge.first;
            int weight = edge.second;

            if (dist[u] + weight < dist[v]) {
                dist[v] = dist[u] + weight;
                if (weight == 0) {
                    dq.push_front(v);
                } else {
                    dq.push_back(v);
                }
            }
        }
    }

    return dist;
}

int main() {
    int n = 5; // Number of vertices
    vector<vector<pair<int, int>>> adj(n);

    // Adding edges (example)
    adj[0].push_back({1, 0});
    adj[1].push_back({2, 1});
    adj[2].push_back({3, 0});
    adj[3].push_back({4, 1});
    adj[4].push_back({0, 1});

    int start = 0;
    vector<int> distances = zeroOneBFS(n, adj, start);

    for (int i = 0; i < n; ++i) {
        cout << "Distance from node " << start << " to node " << i << " is " << distances[i] << endl;
    }

    return 0;
}
